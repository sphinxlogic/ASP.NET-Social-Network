#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fisharoo.FisharooCore.Core.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Fisharoo")]
	public partial class FisharooDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountPermission(AccountPermission instance);
    partial void UpdateAccountPermission(AccountPermission instance);
    partial void DeleteAccountPermission(AccountPermission instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertPrivacyFlag(PrivacyFlag instance);
    partial void UpdatePrivacyFlag(PrivacyFlag instance);
    partial void DeletePrivacyFlag(PrivacyFlag instance);
    partial void InsertProfileAttribute(ProfileAttribute instance);
    partial void UpdateProfileAttribute(ProfileAttribute instance);
    partial void DeleteProfileAttribute(ProfileAttribute instance);
    partial void InsertVisibilityLevel(VisibilityLevel instance);
    partial void UpdateVisibilityLevel(VisibilityLevel instance);
    partial void DeleteVisibilityLevel(VisibilityLevel instance);
    partial void InsertLevelOfExperienceType(LevelOfExperienceType instance);
    partial void UpdateLevelOfExperienceType(LevelOfExperienceType instance);
    partial void DeleteLevelOfExperienceType(LevelOfExperienceType instance);
    partial void InsertPrivacyFlagType(PrivacyFlagType instance);
    partial void UpdatePrivacyFlagType(PrivacyFlagType instance);
    partial void DeletePrivacyFlagType(PrivacyFlagType instance);
    partial void InsertProfileAttributeType(ProfileAttributeType instance);
    partial void UpdateProfileAttributeType(ProfileAttributeType instance);
    partial void DeleteProfileAttributeType(ProfileAttributeType instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertAlert(Alert instance);
    partial void UpdateAlert(Alert instance);
    partial void DeleteAlert(Alert instance);
    partial void InsertAlertType(AlertType instance);
    partial void UpdateAlertType(AlertType instance);
    partial void DeleteAlertType(AlertType instance);
    partial void InsertFriendInvitation(FriendInvitation instance);
    partial void UpdateFriendInvitation(FriendInvitation instance);
    partial void DeleteFriendInvitation(FriendInvitation instance);
    partial void InsertFriendshipDefinitionType(FriendshipDefinitionType instance);
    partial void UpdateFriendshipDefinitionType(FriendshipDefinitionType instance);
    partial void DeleteFriendshipDefinitionType(FriendshipDefinitionType instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertFriendshipDefinition(FriendshipDefinition instance);
    partial void UpdateFriendshipDefinition(FriendshipDefinition instance);
    partial void DeleteFriendshipDefinition(FriendshipDefinition instance);
    partial void InsertStatusUpdate(StatusUpdate instance);
    partial void UpdateStatusUpdate(StatusUpdate instance);
    partial void DeleteStatusUpdate(StatusUpdate instance);
    partial void InsertMessageRecipientType(MessageRecipientType instance);
    partial void UpdateMessageRecipientType(MessageRecipientType instance);
    partial void DeleteMessageRecipientType(MessageRecipientType instance);
    partial void InsertMessageType(MessageType instance);
    partial void UpdateMessageType(MessageType instance);
    partial void DeleteMessageType(MessageType instance);
    partial void InsertMessageStatusType(MessageStatusType instance);
    partial void UpdateMessageStatusType(MessageStatusType instance);
    partial void DeleteMessageStatusType(MessageStatusType instance);
    partial void InsertMessageFolder(MessageFolder instance);
    partial void UpdateMessageFolder(MessageFolder instance);
    partial void DeleteMessageFolder(MessageFolder instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessageRecipient(MessageRecipient instance);
    partial void UpdateMessageRecipient(MessageRecipient instance);
    partial void DeleteMessageRecipient(MessageRecipient instance);
    partial void InsertFileSystemFolder(FileSystemFolder instance);
    partial void UpdateFileSystemFolder(FileSystemFolder instance);
    partial void DeleteFileSystemFolder(FileSystemFolder instance);
    partial void InsertFileType(FileType instance);
    partial void UpdateFileType(FileType instance);
    partial void DeleteFileType(FileType instance);
    partial void InsertFolderType(FolderType instance);
    partial void UpdateFolderType(FolderType instance);
    partial void DeleteFolderType(FolderType instance);
    partial void InsertFolder(Folder instance);
    partial void UpdateFolder(Folder instance);
    partial void DeleteFolder(Folder instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    #endregion
		
		public FisharooDataContext() : 
				base(global::Fisharoo.FisharooCore.Properties.Settings.Default.FisharooConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FisharooDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FisharooDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FisharooDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FisharooDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountPermission> AccountPermissions
		{
			get
			{
				return this.GetTable<AccountPermission>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<PrivacyFlag> PrivacyFlags
		{
			get
			{
				return this.GetTable<PrivacyFlag>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAttribute> ProfileAttributes
		{
			get
			{
				return this.GetTable<ProfileAttribute>();
			}
		}
		
		public System.Data.Linq.Table<VisibilityLevel> VisibilityLevels
		{
			get
			{
				return this.GetTable<VisibilityLevel>();
			}
		}
		
		public System.Data.Linq.Table<LevelOfExperienceType> LevelOfExperienceTypes
		{
			get
			{
				return this.GetTable<LevelOfExperienceType>();
			}
		}
		
		public System.Data.Linq.Table<PrivacyFlagType> PrivacyFlagTypes
		{
			get
			{
				return this.GetTable<PrivacyFlagType>();
			}
		}
		
		public System.Data.Linq.Table<ProfileAttributeType> ProfileAttributeTypes
		{
			get
			{
				return this.GetTable<ProfileAttributeType>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Alert> Alerts
		{
			get
			{
				return this.GetTable<Alert>();
			}
		}
		
		public System.Data.Linq.Table<AlertType> AlertTypes
		{
			get
			{
				return this.GetTable<AlertType>();
			}
		}
		
		public System.Data.Linq.Table<FriendInvitation> FriendInvitations
		{
			get
			{
				return this.GetTable<FriendInvitation>();
			}
		}
		
		public System.Data.Linq.Table<FriendshipDefinitionType> FriendshipDefinitionTypes
		{
			get
			{
				return this.GetTable<FriendshipDefinitionType>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<FriendshipDefinition> FriendshipDefinitions
		{
			get
			{
				return this.GetTable<FriendshipDefinition>();
			}
		}
		
		public System.Data.Linq.Table<StatusUpdate> StatusUpdates
		{
			get
			{
				return this.GetTable<StatusUpdate>();
			}
		}
		
		public System.Data.Linq.Table<MessageRecipientType> MessageRecipientTypes
		{
			get
			{
				return this.GetTable<MessageRecipientType>();
			}
		}
		
		public System.Data.Linq.Table<MessageType> MessageTypes
		{
			get
			{
				return this.GetTable<MessageType>();
			}
		}
		
		public System.Data.Linq.Table<MessageStatusType> MessageStatusTypes
		{
			get
			{
				return this.GetTable<MessageStatusType>();
			}
		}
		
		public System.Data.Linq.Table<MessageFolder> MessageFolders
		{
			get
			{
				return this.GetTable<MessageFolder>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessageRecipient> MessageRecipients
		{
			get
			{
				return this.GetTable<MessageRecipient>();
			}
		}
		
		public System.Data.Linq.Table<AccountFile> AccountFiles
		{
			get
			{
				return this.GetTable<AccountFile>();
			}
		}
		
		public System.Data.Linq.Table<AccountFolder> AccountFolders
		{
			get
			{
				return this.GetTable<AccountFolder>();
			}
		}
		
		public System.Data.Linq.Table<FileSystemFolder> FileSystemFolders
		{
			get
			{
				return this.GetTable<FileSystemFolder>();
			}
		}
		
		public System.Data.Linq.Table<FolderFile> FolderFiles
		{
			get
			{
				return this.GetTable<FolderFile>();
			}
		}
		
		public System.Data.Linq.Table<FileType> FileTypes
		{
			get
			{
				return this.GetTable<FileType>();
			}
		}
		
		public System.Data.Linq.Table<FolderType> FolderTypes
		{
			get
			{
				return this.GetTable<FolderType>();
			}
		}
		
		public System.Data.Linq.Table<Folder> Folders
		{
			get
			{
				return this.GetTable<Folder>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
	}
	
	[Table(Name="dbo.AccountPermissions")]
	public partial class AccountPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _apid;
		
		private int _AccountID;
		
		private int _PermissionID;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnapidChanging(int value);
    partial void OnapidChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public AccountPermission()
		{
			OnCreated();
		}
		
		[Column(Storage="_apid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int apid
		{
			get
			{
				return this._apid;
			}
			set
			{
				if ((this._apid != value))
				{
					this.OnapidChanging(value);
					this.SendPropertyChanging();
					this._apid = value;
					this.SendPropertyChanged("apid");
					this.OnapidChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_PermissionID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public Permission()
		{
			OnCreated();
		}
		
		[Column(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Terms")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermID;
		
		private string _Terms;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIDChanging(int value);
    partial void OnTermIDChanged();
    partial void OnTermsChanging(string value);
    partial void OnTermsChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public Term()
		{
			OnCreated();
		}
		
		[Column(Storage="_TermID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_Terms", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private bool _EmailVerified;
		
		private string _Zip;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _TermID;
		
		private System.Nullable<System.DateTime> _AgreedToTermsDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailVerifiedChanging(bool value);
    partial void OnEmailVerifiedChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnTermIDChanging(int value);
    partial void OnTermIDChanged();
    partial void OnAgreedToTermsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgreedToTermsDateChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[Column(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_EmailVerified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EmailVerified
		{
			get
			{
				return this._EmailVerified;
			}
			set
			{
				if ((this._EmailVerified != value))
				{
					this.OnEmailVerifiedChanging(value);
					this.SendPropertyChanging();
					this._EmailVerified = value;
					this.SendPropertyChanged("EmailVerified");
					this.OnEmailVerifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="VarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_TermID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedToTermsDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AgreedToTermsDate
		{
			get
			{
				return this._AgreedToTermsDate;
			}
			set
			{
				if ((this._AgreedToTermsDate != value))
				{
					this.OnAgreedToTermsDateChanging(value);
					this.SendPropertyChanging();
					this._AgreedToTermsDate = value;
					this.SendPropertyChanged("AgreedToTermsDate");
					this.OnAgreedToTermsDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PrivacyFlags")]
	public partial class PrivacyFlag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrivacyFlagID;
		
		private int _PrivacyFlagTypeID;
		
		private int _ProfileID;
		
		private int _VisibilityLevelID;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private System.DateTime _CreateDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivacyFlagIDChanging(int value);
    partial void OnPrivacyFlagIDChanged();
    partial void OnPrivacyFlagTypeIDChanging(int value);
    partial void OnPrivacyFlagTypeIDChanged();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnVisibilityLevelIDChanging(int value);
    partial void OnVisibilityLevelIDChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public PrivacyFlag()
		{
			OnCreated();
		}
		
		[Column(Storage="_PrivacyFlagID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PrivacyFlagID
		{
			get
			{
				return this._PrivacyFlagID;
			}
			set
			{
				if ((this._PrivacyFlagID != value))
				{
					this.OnPrivacyFlagIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyFlagID = value;
					this.SendPropertyChanged("PrivacyFlagID");
					this.OnPrivacyFlagIDChanged();
				}
			}
		}
		
		[Column(Storage="_PrivacyFlagTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PrivacyFlagTypeID
		{
			get
			{
				return this._PrivacyFlagTypeID;
			}
			set
			{
				if ((this._PrivacyFlagTypeID != value))
				{
					this.OnPrivacyFlagTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyFlagTypeID = value;
					this.SendPropertyChanged("PrivacyFlagTypeID");
					this.OnPrivacyFlagTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[Column(Storage="_VisibilityLevelID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisibilityLevelID
		{
			get
			{
				return this._VisibilityLevelID;
			}
			set
			{
				if ((this._VisibilityLevelID != value))
				{
					this.OnVisibilityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelID = value;
					this.SendPropertyChanged("VisibilityLevelID");
					this.OnVisibilityLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProfileAttributes")]
	public partial class ProfileAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeID;
		
		private int _ProfileID;
		
		private int _ProfileAttributeTypeID;
		
		private string _Response;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeIDChanging(int value);
    partial void OnProfileAttributeIDChanged();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    #endregion
		
		public ProfileAttribute()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProfileAttributeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeID
		{
			get
			{
				return this._ProfileAttributeID;
			}
			set
			{
				if ((this._ProfileAttributeID != value))
				{
					this.OnProfileAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeID = value;
					this.SendPropertyChanged("ProfileAttributeID");
					this.OnProfileAttributeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileAttributeTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Response", DbType="VarChar(2000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VisibilityLevels")]
	public partial class VisibilityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisibilityLevelID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisibilityLevelIDChanging(int value);
    partial void OnVisibilityLevelIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VisibilityLevel()
		{
			OnCreated();
		}
		
		[Column(Storage="_VisibilityLevelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisibilityLevelID
		{
			get
			{
				return this._VisibilityLevelID;
			}
			set
			{
				if ((this._VisibilityLevelID != value))
				{
					this.OnVisibilityLevelIDChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelID = value;
					this.SendPropertyChanged("VisibilityLevelID");
					this.OnVisibilityLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LevelOfExperienceTypes")]
	public partial class LevelOfExperienceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LevelOfExperienceTypeID;
		
		private string _LevelOfExperience;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private byte _SortOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelOfExperienceTypeIDChanging(int value);
    partial void OnLevelOfExperienceTypeIDChanged();
    partial void OnLevelOfExperienceChanging(string value);
    partial void OnLevelOfExperienceChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnSortOrderChanging(byte value);
    partial void OnSortOrderChanged();
    #endregion
		
		public LevelOfExperienceType()
		{
			OnCreated();
		}
		
		[Column(Storage="_LevelOfExperienceTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int LevelOfExperienceTypeID
		{
			get
			{
				return this._LevelOfExperienceTypeID;
			}
			set
			{
				if ((this._LevelOfExperienceTypeID != value))
				{
					this.OnLevelOfExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperienceTypeID = value;
					this.SendPropertyChanged("LevelOfExperienceTypeID");
					this.OnLevelOfExperienceTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LevelOfExperience", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LevelOfExperience
		{
			get
			{
				return this._LevelOfExperience;
			}
			set
			{
				if ((this._LevelOfExperience != value))
				{
					this.OnLevelOfExperienceChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperience = value;
					this.SendPropertyChanged("LevelOfExperience");
					this.OnLevelOfExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PrivacyFlagTypes")]
	public partial class PrivacyFlagType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrivacyFlagTypeID;
		
		private string _FieldName;
		
		private System.Data.Linq.Binary _TimeStamp;
		
		private int _SortOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrivacyFlagTypeIDChanging(int value);
    partial void OnPrivacyFlagTypeIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnTimeStampChanging(System.Data.Linq.Binary value);
    partial void OnTimeStampChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
		
		public PrivacyFlagType()
		{
			OnCreated();
		}
		
		[Column(Storage="_PrivacyFlagTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PrivacyFlagTypeID
		{
			get
			{
				return this._PrivacyFlagTypeID;
			}
			set
			{
				if ((this._PrivacyFlagTypeID != value))
				{
					this.OnPrivacyFlagTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyFlagTypeID = value;
					this.SendPropertyChanged("PrivacyFlagTypeID");
					this.OnPrivacyFlagTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProfileAttributeTypes")]
	public partial class ProfileAttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeTypeID;
		
		private string _AttributeType;
		
		private int _SortOrder;
		
		private int _PrivacyFlagTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeTypeIDChanging(int value);
    partial void OnProfileAttributeTypeIDChanged();
    partial void OnAttributeTypeChanging(string value);
    partial void OnAttributeTypeChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnPrivacyFlagTypeIDChanging(int value);
    partial void OnPrivacyFlagTypeIDChanged();
    #endregion
		
		public ProfileAttributeType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProfileAttributeTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProfileAttributeTypeID
		{
			get
			{
				return this._ProfileAttributeTypeID;
			}
			set
			{
				if ((this._ProfileAttributeTypeID != value))
				{
					this.OnProfileAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeTypeID = value;
					this.SendPropertyChanged("ProfileAttributeTypeID");
					this.OnProfileAttributeTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttributeType
		{
			get
			{
				return this._AttributeType;
			}
			set
			{
				if ((this._AttributeType != value))
				{
					this.OnAttributeTypeChanging(value);
					this.SendPropertyChanging();
					this._AttributeType = value;
					this.SendPropertyChanged("AttributeType");
					this.OnAttributeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Column(Storage="_PrivacyFlagTypeID", DbType="Int NOT NULL")]
		public int PrivacyFlagTypeID
		{
			get
			{
				return this._PrivacyFlagTypeID;
			}
			set
			{
				if ((this._PrivacyFlagTypeID != value))
				{
					this.OnPrivacyFlagTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyFlagTypeID = value;
					this.SendPropertyChanged("PrivacyFlagTypeID");
					this.OnPrivacyFlagTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Profiles")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileID;
		
		private int _AccountID;
		
		private string _ProfileName;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private int _YearOfFirstTank;
		
		private int _NumberOfTanksOwned;
		
		private int _NumberOfFishOwned;
		
		private int _LevelOfExperienceTypeID;
		
		private string _IMMSN;
		
		private string _IMAOL;
		
		private string _IMGIM;
		
		private string _IMYIM;
		
		private string _IMICQ;
		
		private string _IMSkype;
		
		private string _Signature;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private System.Data.Linq.Binary _Avatar;
		
		private string _AvatarMimeType;
		
		private int _UseGravatar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIDChanging(int value);
    partial void OnProfileIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnProfileNameChanging(string value);
    partial void OnProfileNameChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnYearOfFirstTankChanging(int value);
    partial void OnYearOfFirstTankChanged();
    partial void OnNumberOfTanksOwnedChanging(int value);
    partial void OnNumberOfTanksOwnedChanged();
    partial void OnNumberOfFishOwnedChanging(int value);
    partial void OnNumberOfFishOwnedChanged();
    partial void OnLevelOfExperienceTypeIDChanging(int value);
    partial void OnLevelOfExperienceTypeIDChanged();
    partial void OnIMMSNChanging(string value);
    partial void OnIMMSNChanged();
    partial void OnIMAOLChanging(string value);
    partial void OnIMAOLChanged();
    partial void OnIMGIMChanging(string value);
    partial void OnIMGIMChanged();
    partial void OnIMYIMChanging(string value);
    partial void OnIMYIMChanged();
    partial void OnIMICQChanging(string value);
    partial void OnIMICQChanged();
    partial void OnIMSkypeChanging(string value);
    partial void OnIMSkypeChanged();
    partial void OnSignatureChanging(string value);
    partial void OnSignatureChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnAvatarMimeTypeChanging(string value);
    partial void OnAvatarMimeTypeChanged();
    partial void OnUseGravatarChanging(int value);
    partial void OnUseGravatarChanged();
    #endregion
		
		public Profile()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProfileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileID
		{
			get
			{
				return this._ProfileID;
			}
			set
			{
				if ((this._ProfileID != value))
				{
					this.OnProfileIDChanging(value);
					this.SendPropertyChanging();
					this._ProfileID = value;
					this.SendPropertyChanged("ProfileID");
					this.OnProfileIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProfileName", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ProfileName
		{
			get
			{
				return this._ProfileName;
			}
			set
			{
				if ((this._ProfileName != value))
				{
					this.OnProfileNameChanging(value);
					this.SendPropertyChanging();
					this._ProfileName = value;
					this.SendPropertyChanged("ProfileName");
					this.OnProfileNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_YearOfFirstTank", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int YearOfFirstTank
		{
			get
			{
				return this._YearOfFirstTank;
			}
			set
			{
				if ((this._YearOfFirstTank != value))
				{
					this.OnYearOfFirstTankChanging(value);
					this.SendPropertyChanging();
					this._YearOfFirstTank = value;
					this.SendPropertyChanged("YearOfFirstTank");
					this.OnYearOfFirstTankChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfTanksOwned", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int NumberOfTanksOwned
		{
			get
			{
				return this._NumberOfTanksOwned;
			}
			set
			{
				if ((this._NumberOfTanksOwned != value))
				{
					this.OnNumberOfTanksOwnedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTanksOwned = value;
					this.SendPropertyChanged("NumberOfTanksOwned");
					this.OnNumberOfTanksOwnedChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfFishOwned", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int NumberOfFishOwned
		{
			get
			{
				return this._NumberOfFishOwned;
			}
			set
			{
				if ((this._NumberOfFishOwned != value))
				{
					this.OnNumberOfFishOwnedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfFishOwned = value;
					this.SendPropertyChanged("NumberOfFishOwned");
					this.OnNumberOfFishOwnedChanged();
				}
			}
		}
		
		[Column(Storage="_LevelOfExperienceTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LevelOfExperienceTypeID
		{
			get
			{
				return this._LevelOfExperienceTypeID;
			}
			set
			{
				if ((this._LevelOfExperienceTypeID != value))
				{
					this.OnLevelOfExperienceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LevelOfExperienceTypeID = value;
					this.SendPropertyChanged("LevelOfExperienceTypeID");
					this.OnLevelOfExperienceTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IMMSN", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMMSN
		{
			get
			{
				return this._IMMSN;
			}
			set
			{
				if ((this._IMMSN != value))
				{
					this.OnIMMSNChanging(value);
					this.SendPropertyChanging();
					this._IMMSN = value;
					this.SendPropertyChanged("IMMSN");
					this.OnIMMSNChanged();
				}
			}
		}
		
		[Column(Storage="_IMAOL", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMAOL
		{
			get
			{
				return this._IMAOL;
			}
			set
			{
				if ((this._IMAOL != value))
				{
					this.OnIMAOLChanging(value);
					this.SendPropertyChanging();
					this._IMAOL = value;
					this.SendPropertyChanged("IMAOL");
					this.OnIMAOLChanged();
				}
			}
		}
		
		[Column(Storage="_IMGIM", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMGIM
		{
			get
			{
				return this._IMGIM;
			}
			set
			{
				if ((this._IMGIM != value))
				{
					this.OnIMGIMChanging(value);
					this.SendPropertyChanging();
					this._IMGIM = value;
					this.SendPropertyChanged("IMGIM");
					this.OnIMGIMChanged();
				}
			}
		}
		
		[Column(Storage="_IMYIM", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMYIM
		{
			get
			{
				return this._IMYIM;
			}
			set
			{
				if ((this._IMYIM != value))
				{
					this.OnIMYIMChanging(value);
					this.SendPropertyChanging();
					this._IMYIM = value;
					this.SendPropertyChanged("IMYIM");
					this.OnIMYIMChanged();
				}
			}
		}
		
		[Column(Storage="_IMICQ", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMICQ
		{
			get
			{
				return this._IMICQ;
			}
			set
			{
				if ((this._IMICQ != value))
				{
					this.OnIMICQChanging(value);
					this.SendPropertyChanging();
					this._IMICQ = value;
					this.SendPropertyChanged("IMICQ");
					this.OnIMICQChanged();
				}
			}
		}
		
		[Column(Storage="_IMSkype", DbType="VarChar(40) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IMSkype
		{
			get
			{
				return this._IMSkype;
			}
			set
			{
				if ((this._IMSkype != value))
				{
					this.OnIMSkypeChanging(value);
					this.SendPropertyChanging();
					this._IMSkype = value;
					this.SendPropertyChanged("IMSkype");
					this.OnIMSkypeChanged();
				}
			}
		}
		
		[Column(Storage="_Signature", DbType="VarChar(300) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Signature
		{
			get
			{
				return this._Signature;
			}
			set
			{
				if ((this._Signature != value))
				{
					this.OnSignatureChanging(value);
					this.SendPropertyChanging();
					this._Signature = value;
					this.SendPropertyChanged("Signature");
					this.OnSignatureChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Avatar", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[Column(Storage="_AvatarMimeType", DbType="VarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string AvatarMimeType
		{
			get
			{
				return this._AvatarMimeType;
			}
			set
			{
				if ((this._AvatarMimeType != value))
				{
					this.OnAvatarMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._AvatarMimeType = value;
					this.SendPropertyChanged("AvatarMimeType");
					this.OnAvatarMimeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UseGravatar", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UseGravatar
		{
			get
			{
				return this._UseGravatar;
			}
			set
			{
				if ((this._UseGravatar != value))
				{
					this.OnUseGravatarChanging(value);
					this.SendPropertyChanging();
					this._UseGravatar = value;
					this.SendPropertyChanged("UseGravatar");
					this.OnUseGravatarChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Alerts")]
	public partial class Alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AlertID;
		
		private int _AccountID;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _AlertTypeID;
		
		private bool _IsHidden;
		
		private string _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertIDChanging(long value);
    partial void OnAlertIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnAlertTypeIDChanging(int value);
    partial void OnAlertTypeIDChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public Alert()
		{
			OnCreated();
		}
		
		[Column(Storage="_AlertID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long AlertID
		{
			get
			{
				return this._AlertID;
			}
			set
			{
				if ((this._AlertID != value))
				{
					this.OnAlertIDChanging(value);
					this.SendPropertyChanging();
					this._AlertID = value;
					this.SendPropertyChanged("AlertID");
					this.OnAlertIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_AlertTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AlertTypeID
		{
			get
			{
				return this._AlertTypeID;
			}
			set
			{
				if ((this._AlertTypeID != value))
				{
					this.OnAlertTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeID = value;
					this.SendPropertyChanged("AlertTypeID");
					this.OnAlertTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsHidden", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AlertTypes")]
	public partial class AlertType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertTypeIDChanging(int value);
    partial void OnAlertTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AlertType()
		{
			OnCreated();
		}
		
		[Column(Storage="_AlertTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlertTypeID
		{
			get
			{
				return this._AlertTypeID;
			}
			set
			{
				if ((this._AlertTypeID != value))
				{
					this.OnAlertTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeID = value;
					this.SendPropertyChanged("AlertTypeID");
					this.OnAlertTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FriendInvitations")]
	public partial class FriendInvitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvitationID;
		
		private int _AccountID;
		
		private string _Email;
		
		private System.Guid _GUID;
		
		private System.DateTime _CreateDate;
		
		private int _BecameAccountID;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvitationIDChanging(int value);
    partial void OnInvitationIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnBecameAccountIDChanging(int value);
    partial void OnBecameAccountIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public FriendInvitation()
		{
			OnCreated();
		}
		
		[Column(Storage="_InvitationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int InvitationID
		{
			get
			{
				return this._InvitationID;
			}
			set
			{
				if ((this._InvitationID != value))
				{
					this.OnInvitationIDChanging(value);
					this.SendPropertyChanging();
					this._InvitationID = value;
					this.SendPropertyChanged("InvitationID");
					this.OnInvitationIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_BecameAccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BecameAccountID
		{
			get
			{
				return this._BecameAccountID;
			}
			set
			{
				if ((this._BecameAccountID != value))
				{
					this.OnBecameAccountIDChanging(value);
					this.SendPropertyChanging();
					this._BecameAccountID = value;
					this.SendPropertyChanged("BecameAccountID");
					this.OnBecameAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FriendshipDefinitionTypes")]
	public partial class FriendshipDefinitionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FriendshipDefinitionTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriendshipDefinitionTypeIDChanging(int value);
    partial void OnFriendshipDefinitionTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FriendshipDefinitionType()
		{
			OnCreated();
		}
		
		[Column(Storage="_FriendshipDefinitionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FriendshipDefinitionTypeID
		{
			get
			{
				return this._FriendshipDefinitionTypeID;
			}
			set
			{
				if ((this._FriendshipDefinitionTypeID != value))
				{
					this.OnFriendshipDefinitionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FriendshipDefinitionTypeID = value;
					this.SendPropertyChanged("FriendshipDefinitionTypeID");
					this.OnFriendshipDefinitionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Friends")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FriendID;
		
		private int _AccountID;
		
		private int _MyFriendsAccountID;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriendIDChanging(int value);
    partial void OnFriendIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnMyFriendsAccountIDChanging(int value);
    partial void OnMyFriendsAccountIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public Friend()
		{
			OnCreated();
		}
		
		[Column(Storage="_FriendID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FriendID
		{
			get
			{
				return this._FriendID;
			}
			set
			{
				if ((this._FriendID != value))
				{
					this.OnFriendIDChanging(value);
					this.SendPropertyChanging();
					this._FriendID = value;
					this.SendPropertyChanged("FriendID");
					this.OnFriendIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_MyFriendsAccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MyFriendsAccountID
		{
			get
			{
				return this._MyFriendsAccountID;
			}
			set
			{
				if ((this._MyFriendsAccountID != value))
				{
					this.OnMyFriendsAccountIDChanging(value);
					this.SendPropertyChanging();
					this._MyFriendsAccountID = value;
					this.SendPropertyChanged("MyFriendsAccountID");
					this.OnMyFriendsAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FriendshipDefinitions")]
	public partial class FriendshipDefinition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FriendshipDefinitionID;
		
		private int _FriendID;
		
		private int _FriendshipDefinitionTypeID;
		
		private System.DateTime _CreateDate;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DateFrom;
		
		private System.Nullable<System.DateTime> _DateTo;
		
		private string _OptionalText1;
		
		private string _OptionalText2;
		
		private bool _Approved;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriendshipDefinitionIDChanging(int value);
    partial void OnFriendshipDefinitionIDChanged();
    partial void OnFriendIDChanging(int value);
    partial void OnFriendIDChanged();
    partial void OnFriendshipDefinitionTypeIDChanging(int value);
    partial void OnFriendshipDefinitionTypeIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateFromChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFromChanged();
    partial void OnDateToChanging(System.Nullable<System.DateTime> value);
    partial void OnDateToChanged();
    partial void OnOptionalText1Changing(string value);
    partial void OnOptionalText1Changed();
    partial void OnOptionalText2Changing(string value);
    partial void OnOptionalText2Changed();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public FriendshipDefinition()
		{
			OnCreated();
		}
		
		[Column(Storage="_FriendshipDefinitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FriendshipDefinitionID
		{
			get
			{
				return this._FriendshipDefinitionID;
			}
			set
			{
				if ((this._FriendshipDefinitionID != value))
				{
					this.OnFriendshipDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._FriendshipDefinitionID = value;
					this.SendPropertyChanged("FriendshipDefinitionID");
					this.OnFriendshipDefinitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_FriendID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FriendID
		{
			get
			{
				return this._FriendID;
			}
			set
			{
				if ((this._FriendID != value))
				{
					this.OnFriendIDChanging(value);
					this.SendPropertyChanging();
					this._FriendID = value;
					this.SendPropertyChanged("FriendID");
					this.OnFriendIDChanged();
				}
			}
		}
		
		[Column(Storage="_FriendshipDefinitionTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FriendshipDefinitionTypeID
		{
			get
			{
				return this._FriendshipDefinitionTypeID;
			}
			set
			{
				if ((this._FriendshipDefinitionTypeID != value))
				{
					this.OnFriendshipDefinitionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FriendshipDefinitionTypeID = value;
					this.SendPropertyChanged("FriendshipDefinitionTypeID");
					this.OnFriendshipDefinitionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DateFrom", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateFrom
		{
			get
			{
				return this._DateFrom;
			}
			set
			{
				if ((this._DateFrom != value))
				{
					this.OnDateFromChanging(value);
					this.SendPropertyChanging();
					this._DateFrom = value;
					this.SendPropertyChanged("DateFrom");
					this.OnDateFromChanged();
				}
			}
		}
		
		[Column(Storage="_DateTo", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[Column(Storage="_OptionalText1", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string OptionalText1
		{
			get
			{
				return this._OptionalText1;
			}
			set
			{
				if ((this._OptionalText1 != value))
				{
					this.OnOptionalText1Changing(value);
					this.SendPropertyChanging();
					this._OptionalText1 = value;
					this.SendPropertyChanged("OptionalText1");
					this.OnOptionalText1Changed();
				}
			}
		}
		
		[Column(Storage="_OptionalText2", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string OptionalText2
		{
			get
			{
				return this._OptionalText2;
			}
			set
			{
				if ((this._OptionalText2 != value))
				{
					this.OnOptionalText2Changing(value);
					this.SendPropertyChanging();
					this._OptionalText2 = value;
					this.SendPropertyChanged("OptionalText2");
					this.OnOptionalText2Changed();
				}
			}
		}
		
		[Column(Storage="_Approved", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StatusUpdates")]
	public partial class StatusUpdate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StatusUpdateID;
		
		private System.DateTime _CreateDate;
		
		private string _Status;
		
		private System.Nullable<int> _AccountID;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusUpdateIDChanging(long value);
    partial void OnStatusUpdateIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public StatusUpdate()
		{
			OnCreated();
		}
		
		[Column(Storage="_StatusUpdateID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long StatusUpdateID
		{
			get
			{
				return this._StatusUpdateID;
			}
			set
			{
				if ((this._StatusUpdateID != value))
				{
					this.OnStatusUpdateIDChanging(value);
					this.SendPropertyChanging();
					this._StatusUpdateID = value;
					this.SendPropertyChanged("StatusUpdateID");
					this.OnStatusUpdateIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageRecipientTypes")]
	public partial class MessageRecipientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageRecipientTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageRecipientTypeIDChanging(int value);
    partial void OnMessageRecipientTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public MessageRecipientType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageRecipientTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageRecipientTypeID
		{
			get
			{
				return this._MessageRecipientTypeID;
			}
			set
			{
				if ((this._MessageRecipientTypeID != value))
				{
					this.OnMessageRecipientTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageRecipientTypeID = value;
					this.SendPropertyChanged("MessageRecipientTypeID");
					this.OnMessageRecipientTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageTypes")]
	public partial class MessageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageTypeID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageTypeIDChanging(int value);
    partial void OnMessageTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public MessageType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MessageTypeID
		{
			get
			{
				return this._MessageTypeID;
			}
			set
			{
				if ((this._MessageTypeID != value))
				{
					this.OnMessageTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageTypeID = value;
					this.SendPropertyChanged("MessageTypeID");
					this.OnMessageTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageStatusTypes")]
	public partial class MessageStatusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageStatusTypeID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageStatusTypeIDChanging(int value);
    partial void OnMessageStatusTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public MessageStatusType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageStatusTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MessageStatusTypeID
		{
			get
			{
				return this._MessageStatusTypeID;
			}
			set
			{
				if ((this._MessageStatusTypeID != value))
				{
					this.OnMessageStatusTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageStatusTypeID = value;
					this.SendPropertyChanged("MessageStatusTypeID");
					this.OnMessageStatusTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageFolders")]
	public partial class MessageFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageFolderID;
		
		private string _FolderName;
		
		private bool _IsSystem;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _AccountID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageFolderIDChanging(int value);
    partial void OnMessageFolderIDChanged();
    partial void OnFolderNameChanging(string value);
    partial void OnFolderNameChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    #endregion
		
		public MessageFolder()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageFolderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MessageFolderID
		{
			get
			{
				return this._MessageFolderID;
			}
			set
			{
				if ((this._MessageFolderID != value))
				{
					this.OnMessageFolderIDChanging(value);
					this.SendPropertyChanging();
					this._MessageFolderID = value;
					this.SendPropertyChanged("MessageFolderID");
					this.OnMessageFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_FolderName", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FolderName
		{
			get
			{
				return this._FolderName;
			}
			set
			{
				if ((this._FolderName != value))
				{
					this.OnFolderNameChanging(value);
					this.SendPropertyChanging();
					this._FolderName = value;
					this.SendPropertyChanged("FolderName");
					this.OnFolderNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsSystem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MessageID;
		
		private int _SentByAccountID;
		
		private string _Subject;
		
		private string _Body;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _MessageTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(long value);
    partial void OnMessageIDChanged();
    partial void OnSentByAccountIDChanging(int value);
    partial void OnSentByAccountIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnMessageTypeIDChanging(int value);
    partial void OnMessageTypeIDChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_SentByAccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SentByAccountID
		{
			get
			{
				return this._SentByAccountID;
			}
			set
			{
				if ((this._SentByAccountID != value))
				{
					this.OnSentByAccountIDChanging(value);
					this.SendPropertyChanging();
					this._SentByAccountID = value;
					this.SendPropertyChanged("SentByAccountID");
					this.OnSentByAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MessageTypeID
		{
			get
			{
				return this._MessageTypeID;
			}
			set
			{
				if ((this._MessageTypeID != value))
				{
					this.OnMessageTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageTypeID = value;
					this.SendPropertyChanged("MessageTypeID");
					this.OnMessageTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MessageRecipients")]
	public partial class MessageRecipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MessageRecipientID;
		
		private long _MessageID;
		
		private int _MessageRecipientTypeID;
		
		private int _AccountID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private int _MessageFolderID;
		
		private System.Nullable<int> _MessageStatusTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageRecipientIDChanging(long value);
    partial void OnMessageRecipientIDChanged();
    partial void OnMessageIDChanging(long value);
    partial void OnMessageIDChanged();
    partial void OnMessageRecipientTypeIDChanging(int value);
    partial void OnMessageRecipientTypeIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnMessageFolderIDChanging(int value);
    partial void OnMessageFolderIDChanged();
    partial void OnMessageStatusTypeIDChanging(System.Nullable<int> value);
    partial void OnMessageStatusTypeIDChanged();
    #endregion
		
		public MessageRecipient()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageRecipientID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long MessageRecipientID
		{
			get
			{
				return this._MessageRecipientID;
			}
			set
			{
				if ((this._MessageRecipientID != value))
				{
					this.OnMessageRecipientIDChanging(value);
					this.SendPropertyChanging();
					this._MessageRecipientID = value;
					this.SendPropertyChanged("MessageRecipientID");
					this.OnMessageRecipientIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageRecipientTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MessageRecipientTypeID
		{
			get
			{
				return this._MessageRecipientTypeID;
			}
			set
			{
				if ((this._MessageRecipientTypeID != value))
				{
					this.OnMessageRecipientTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageRecipientTypeID = value;
					this.SendPropertyChanged("MessageRecipientTypeID");
					this.OnMessageRecipientTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_MessageFolderID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MessageFolderID
		{
			get
			{
				return this._MessageFolderID;
			}
			set
			{
				if ((this._MessageFolderID != value))
				{
					this.OnMessageFolderIDChanging(value);
					this.SendPropertyChanging();
					this._MessageFolderID = value;
					this.SendPropertyChanged("MessageFolderID");
					this.OnMessageFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageStatusTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MessageStatusTypeID
		{
			get
			{
				return this._MessageStatusTypeID;
			}
			set
			{
				if ((this._MessageStatusTypeID != value))
				{
					this.OnMessageStatusTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MessageStatusTypeID = value;
					this.SendPropertyChanged("MessageStatusTypeID");
					this.OnMessageStatusTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AccountFiles")]
	public partial class AccountFile
	{
		
		private int _AccountID;
		
		private long _FileID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		public AccountFile()
		{
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this._AccountID = value;
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this._FileID = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.AccountFolders")]
	public partial class AccountFolder
	{
		
		private int _AccountID;
		
		private long _FolderID;
		
		private System.Data.Linq.Binary _Timestamp;
		
		public AccountFolder()
		{
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this._AccountID = value;
				}
			}
		}
		
		[Column(Storage="_FolderID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this._FolderID = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.FileSystemFolders")]
	public partial class FileSystemFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileSystemFolderID;
		
		private string _Path;
		
		private System.Data.Linq.Binary _Timestamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileSystemFolderIDChanging(int value);
    partial void OnFileSystemFolderIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    #endregion
		
		public FileSystemFolder()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileSystemFolderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FileSystemFolderID
		{
			get
			{
				return this._FileSystemFolderID;
			}
			set
			{
				if ((this._FileSystemFolderID != value))
				{
					this.OnFileSystemFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FileSystemFolderID = value;
					this.SendPropertyChanged("FileSystemFolderID");
					this.OnFileSystemFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FolderFiles")]
	public partial class FolderFile
	{
		
		private long _FolderID;
		
		private long _FileID;
		
		private int _AccountID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Data.Linq.Binary _Timestamp;
		
		public FolderFile()
		{
		}
		
		[Column(Storage="_FolderID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this._FolderID = value;
				}
			}
		}
		
		[Column(Storage="_FileID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this._FileID = value;
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this._AccountID = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this._Timestamp = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.FileTypes")]
	public partial class FileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileTypeIDChanging(int value);
    partial void OnFileTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FileType()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileTypeID
		{
			get
			{
				return this._FileTypeID;
			}
			set
			{
				if ((this._FileTypeID != value))
				{
					this.OnFileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileTypeID = value;
					this.SendPropertyChanged("FileTypeID");
					this.OnFileTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FolderTypes")]
	public partial class FolderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderTypeID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderTypeIDChanging(int value);
    partial void OnFolderTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FolderType()
		{
			OnCreated();
		}
		
		[Column(Storage="_FolderTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FolderTypeID
		{
			get
			{
				return this._FolderTypeID;
			}
			set
			{
				if ((this._FolderTypeID != value))
				{
					this.OnFolderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FolderTypeID = value;
					this.SendPropertyChanged("FolderTypeID");
					this.OnFolderTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Folders")]
	public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FolderID;
		
		private string _Name;
		
		private bool _IsPublicResource;
		
		private System.DateTime _CreateDate;
		
		private int _AccountID;
		
		private string _Description;
		
		private string _Location;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private System.Nullable<int> _FolderTypeID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(long value);
    partial void OnFolderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsPublicResourceChanging(bool value);
    partial void OnIsPublicResourceChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnFolderTypeIDChanging(System.Nullable<int> value);
    partial void OnFolderTypeIDChanged();
    #endregion
		
		public Folder()
		{
			OnCreated();
		}
		
		[Column(Storage="_FolderID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublicResource", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPublicResource
		{
			get
			{
				return this._IsPublicResource;
			}
			set
			{
				if ((this._IsPublicResource != value))
				{
					this.OnIsPublicResourceChanging(value);
					this.SendPropertyChanging();
					this._IsPublicResource = value;
					this.SendPropertyChanged("IsPublicResource");
					this.OnIsPublicResourceChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_FolderTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FolderTypeID
		{
			get
			{
				return this._FolderTypeID;
			}
			set
			{
				if ((this._FolderTypeID != value))
				{
					this.OnFolderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FolderTypeID = value;
					this.SendPropertyChanged("FolderTypeID");
					this.OnFolderTypeIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FileID;
		
		private System.Guid _FileSystemName;
		
		private int _FileSystemFolderID;
		
		private string _FileName;
		
		private int _FileTypeID;
		
		private System.DateTime _CreateDate;
		
		private int _AccountID;
		
		private bool _IsPublicResource;
		
		private long _DefaultFolderID;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Timestamp;
		
		private long _Size;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(long value);
    partial void OnFileIDChanged();
    partial void OnFileSystemNameChanging(System.Guid value);
    partial void OnFileSystemNameChanged();
    partial void OnFileSystemFolderIDChanging(int value);
    partial void OnFileSystemFolderIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileTypeIDChanging(int value);
    partial void OnFileTypeIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnIsPublicResourceChanging(bool value);
    partial void OnIsPublicResourceChanged();
    partial void OnDefaultFolderIDChanging(long value);
    partial void OnDefaultFolderIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimestampChanging(System.Data.Linq.Binary value);
    partial void OnTimestampChanged();
    partial void OnSizeChanging(long value);
    partial void OnSizeChanged();
    #endregion
		
		public File()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileSystemName", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid FileSystemName
		{
			get
			{
				return this._FileSystemName;
			}
			set
			{
				if ((this._FileSystemName != value))
				{
					this.OnFileSystemNameChanging(value);
					this.SendPropertyChanging();
					this._FileSystemName = value;
					this.SendPropertyChanged("FileSystemName");
					this.OnFileSystemNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileSystemFolderID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FileSystemFolderID
		{
			get
			{
				return this._FileSystemFolderID;
			}
			set
			{
				if ((this._FileSystemFolderID != value))
				{
					this.OnFileSystemFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FileSystemFolderID = value;
					this.SendPropertyChanged("FileSystemFolderID");
					this.OnFileSystemFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FileTypeID
		{
			get
			{
				return this._FileTypeID;
			}
			set
			{
				if ((this._FileTypeID != value))
				{
					this.OnFileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FileTypeID = value;
					this.SendPropertyChanged("FileTypeID");
					this.OnFileTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPublicResource", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPublicResource
		{
			get
			{
				return this._IsPublicResource;
			}
			set
			{
				if ((this._IsPublicResource != value))
				{
					this.OnIsPublicResourceChanging(value);
					this.SendPropertyChanging();
					this._IsPublicResource = value;
					this.SendPropertyChanged("IsPublicResource");
					this.OnIsPublicResourceChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultFolderID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long DefaultFolderID
		{
			get
			{
				return this._DefaultFolderID;
			}
			set
			{
				if ((this._DefaultFolderID != value))
				{
					this.OnDefaultFolderIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultFolderID = value;
					this.SendPropertyChanged("DefaultFolderID");
					this.OnDefaultFolderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
